#!/usr/bin/env python
# -*- coding: utf-8 -*-

# /robot/mode 
# 0 : Idle
# 1 : Wait for green light
# 2 : Moving to traffic sign
 
import rospy
import numpy as np
from std_msgs.msg import Float64, UInt8
from geometry_msgs.msg import Twist

class ControlLane():
    def __init__(self):
        self.sub_green_light = rospy.Subscriber('/robot/allow_moving', UInt8, self.cbGetLight, queue_size=1)
        self.sub_robot_mode = rospy.Subscriber('/robot/mode', UInt8, self.cbGetMode, queue_size=1)
        self.sub_lane = rospy.Subscriber('/detect/lane', Float64, self.cbFollowLane, queue_size = 1)
        self.sub_max_vel = rospy.Subscriber('/control/max_vel', Float64, self.cbGetMaxVel, queue_size = 1)
        
        self.pub_cmd_vel = rospy.Publisher('/cmd_vel', Twist, queue_size = 1)
        self.pub_must_slow = rospy.Subscriber('/robot/must_slow', UInt8, self.cbMustSlow, queue_size = 1)

        self.lastError = 0
        self.MAX_VEL = 0.1
        self.allow_moving = False
        self.must_slow = 1
        self.mode = 0

        rospy.on_shutdown(self.fnShutDown)

    def cbGetMode(self, mode):
        self.mode = mode.data

    def cbMustSlow(self, slow):
        if self.mode == 4:
            rospy.loginfo("Slow function triggered!")
            self.must_slow = slow.data / 100
        else:
            self.must_slow = 1

    def cbGetLight(self, light):
        if light.data == 1:
            self.allow_moving = True
        if light.data == 0:
            self.allow_moving = False
            twist = Twist()      
            twist.linear.x = 0
            twist.linear.y = 0
            twist.linear.z = 0
            twist.angular.x = 0
            twist.angular.y = 0
            twist.angular.z = 0
            self.pub_cmd_vel.publish(twist)

    def cbGetMaxVel(self, max_vel_msg):
        self.MAX_VEL = max_vel_msg.data

    def cbFollowLane(self, desired_center):
        if self.allow_moving:
            center = desired_center.data

            error = center - 500

            Kp = 0.01
            Kd = 0.01

            angular_z = Kp * error + Kd * (error - self.lastError)
            self.lastError = error
            
            twist = Twist()
            # twist.linear.x = 0.05        
            twist.linear.x = min(self.MAX_VEL * ((1 - abs(error) / 500) ** 2.2), 0.2 * self.must_slow)
            twist.linear.y = 0
            twist.linear.z = 0
            twist.angular.x = 0
            twist.angular.y = 0
            twist.angular.z = -max(angular_z, -2.0) if angular_z < 0 else -min(angular_z, 2.0)
            self.pub_cmd_vel.publish(twist)

    def fnShutDown(self):
        rospy.loginfo("Shutting down. cmd_vel will be 0")

        twist = Twist()
        twist.linear.x = 0
        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = 0
        self.pub_cmd_vel.publish(twist) 

    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('control_lane')
    node = ControlLane()
    node.main()
