#!/usr/bin/env python
# -*- coding: utf-8 -*-

################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

# Authors: Leon Jung, [AuTURBO] Kihoon Kim (https://github.com/auturbo), Gilbert, Ashe Kim

import rospy, roslaunch
import subprocess
import os
import sys
from enum import Enum
from std_msgs.msg import UInt8, Float64
 
class CoreNodeController():
    def __init__(self):
        self.ros_package_path = os.path.dirname(os.path.realpath(__file__))
        self.ros_package_path = self.ros_package_path.replace('turtlebot3_autorace_core/nodes', '')

        # subscribes : status returned
        self.sub_mode_control = rospy.Subscriber('/robot/mode', UInt8, self.cbReceiveMode, queue_size=1)
  
        # publishes orders
        self.pub_traffic_light_order = rospy.Publisher('/detect/traffic_light_order', UInt8, queue_size=1)

        self.current_mode = 0
        self.left_right_detected = False
    
        self.uuid = roslaunch.rlutil.get_or_generate_uuid(None, False)

        self.launch_camera_in_launched = False
        self.launch_camera_ex_launched = False
        self.launch_detect_lane_launched = False    
        self.launch_detect_traffic_light_launched = False
        self.launch_driving_lane_launched = False
        self.launch_detect_intersection_sign_launched = False
        self.launch_control_moving_launched = False
        self.launch_detect_construction_sign_launched = False
        self.launch_detect_construction_launched = False

        self.fnLaunch("camera_in_calib", True)
        self.fnLaunch("camera_ex_calib", True)

        self.is_triggered = False

        loop_rate = rospy.Rate(2)
        while not rospy.is_shutdown():
            if self.is_triggered == True:
                self.fnControlNode()
            
            loop_rate.sleep()

    def cbReceiveMode(self, mode_msg):
        rospy.loginfo("starts the progress with %d", mode_msg.data)
        
        self.current_mode = mode_msg.data
        self.is_triggered = True

  
    def fnControlNode(self): 
        if self.current_mode == 5:
            rospy.loginfo("New trigger for parking")

            self.fnLaunch("detect_construction_sign", False)
            self.fnLaunch("detect_construction", False)
            self.fnLaunch("control_moving", False) 

        elif self.current_mode == 4:        # if mode == Find Obstacle
            rospy.loginfo("New trigger for obstacle")

            self.fnLaunch("detect_intersection_sign", False)
            self.fnLaunch("detect_construction_sign", False)
            self.fnLaunch("control_moving", True) 

        elif self.current_mode == 3:        # if mode == Find Construction Sign
            rospy.loginfo("New trigger for construction")

            self.fnLaunch("detect_construction_sign", True)
            self.fnLaunch("detect_construction", True)

        elif self.current_mode == 2:      # if mode == Find Traffic Sign
            rospy.loginfo("New trigger for lane_following")

            self.fnLaunch("detect_traffic_light", False)
            self.fnLaunch("detect_intersection_sign", True)

        elif self.current_mode == 1:    # if mode == Traffic Light
            rospy.loginfo("New trigger for traffic_light")

            self.fnLaunch("detect_lane", True)
            self.fnLaunch("detect_traffic_light", True)
            self.fnLaunch("control_lane", True)

        rospy.sleep(2)

   
    def fnLaunch(self, launch_str, is_start):
        if launch_str == "camera_in_calib":
            if is_start == True:
                if self.launch_camera_in_launched == False:
                    self.launch_camera_in = roslaunch.scriptapi.ROSLaunch()
                    self.launch_camera_in = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "turtlebot3_autorace_camera/launch/intrinsic_camera_calibration.launch"])
                    self.launch_camera_in_launched = True
                    self.launch_camera_in.start()
                else:
                    pass
            else:
                if self.launch_camera_in_launched == True:
                    self.launch_camera_in_launched = False
                    self.launch_camera_in.shutdown()
                else:
                    pass   
        elif launch_str == "camera_ex_calib":
            if is_start == True:
                if self.launch_camera_ex_launched == False:
                    self.launch_camera_ex = roslaunch.scriptapi.ROSLaunch()
                    self.launch_camera_ex = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "turtlebot3_autorace_camera/launch/extrinsic_camera_calibration.launch"])
                    self.launch_camera_ex_launched = True
                    self.launch_camera_ex.start()
                else:
                    pass
            else:
                if self.launch_camera_ex_launched == True:
                    self.launch_camera_ex_launched = False
                    self.launch_camera_ex.shutdown()
                else:
                    pass   
                           
        elif launch_str == "detect_lane":
            if is_start == True:
                if self.launch_detect_lane_launched == False:
                    self.launch_detect_lane = roslaunch.scriptapi.ROSLaunch()
                    self.launch_detect_lane = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "turtlebot3_autorace_detect/launch/detect_lane.launch"])
                    self.launch_detect_lane_launched = True
                    self.launch_detect_lane.start()
                else:
                    pass
            else:
                if self.launch_detect_lane_launched == True:
                    self.launch_detect_lane_launched = False
                    self.launch_detect_lane.shutdown()
                else:
                    pass  

        elif launch_str == "detect_traffic_light":
            if is_start == True:
                if self.launch_detect_traffic_light_launched == False:
                    self.launch_detect_traffic_light = roslaunch.scriptapi.ROSLaunch()
                    self.launch_detect_traffic_light = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "turtlebot3_autorace_detect/launch/detect_traffic_light.launch"])     
                    self.launch_detect_traffic_light_launched = True
                    self.launch_detect_traffic_light.start()
                else:
                    pass
            else:
                if self.launch_detect_traffic_light_launched == True:
                    self.launch_detect_traffic_light_launched = False
                    self.launch_detect_traffic_light.shutdown()
                else:
                    pass    
                    
        elif launch_str == "control_lane":
            if is_start == True:
                if self.launch_driving_lane_launched == False:
                    self.launch_driving_lane = roslaunch.scriptapi.ROSLaunch()
                    self.launch_driving_lane = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "turtlebot3_autorace_driving/launch/turtlebot3_autorace_control_lane.launch"])
                    self.launch_driving_lane_launched = True
                    self.launch_driving_lane.start()
                else:
                    pass
            else:
                if self.launch_driving_lane_launched == True:
                    self.launch_driving_lane_launched = False
                    self.launch_driving_lane.shutdown()
                else:
                    pass   
        elif launch_str == "detect_intersection_sign":
            if is_start == True:
                if self.launch_detect_intersection_sign_launched == False:
                    self.launch_detect_intersection_sign = roslaunch.scriptapi.ROSLaunch()
                    self.launch_detect_intersection_sign = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "turtlebot3_autorace_detect/launch/detect_sign.launch"])
                    self.launch_detect_intersection_sign_launched = True
                    self.launch_detect_intersection_sign.start()
                else:
                    pass
            else:
                if self.launch_detect_intersection_sign_launched == True:
                    self.launch_detect_intersection_sign_launched = False
                    self.launch_detect_intersection_sign.shutdown()
                else:
                    pass    
        elif launch_str == "control_moving":
            if is_start == True:
                if self.launch_control_moving_launched == False:
                    self.launch_control_moving = roslaunch.scriptapi.ROSLaunch()
                    self.launch_control_moving = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "turtlebot3_autorace_driving/launch/turtlebot3_autorace_control_moving.launch"])
                    self.launch_control_moving_launched = True
                    self.launch_control_moving.start()
                else:
                    pass
            else:
                if self.launch_control_moving_launched == True:
                    self.launch_control_moving_launched = False
                    self.launch_control_moving.shutdown()
                pass
        elif launch_str == "detect_construction_sign":
            if is_start == True:
                if self.launch_detect_construction_sign_launched == False:
                    self.launch_detect_construction_sign = roslaunch.scriptapi.ROSLaunch()
                    cli_args = [self.ros_package_path + "turtlebot3_autorace_detect/launch/detect_sign.launch",'mission:=construction']
                    roslaunch_args = cli_args[1:]
                    roslaunch_file = [(roslaunch.rlutil.resolve_launch_arguments(cli_args)[0], roslaunch_args)]
                    self.launch_detect_construction_sign = roslaunch.parent.ROSLaunchParent(self.uuid, roslaunch_file)
                    self.launch_detect_construction_sign_launched = True
                    self.launch_detect_construction_sign.start()
                else:
                    pass
            else:
                if self.launch_detect_construction_sign_launched == True:
                    self.launch_detect_construction_sign_launched = False
                    self.launch_detect_construction_sign.shutdown()
                pass
        elif launch_str == "detect_construction":
            if is_start == True:
                if self.launch_detect_construction_launched == False:
                    self.launch_detect_construction = roslaunch.scriptapi.ROSLaunch()
                    self.launch_detect_construction = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "turtlebot3_autorace_detect/launch/detect_construction.launch"])
                    self.launch_detect_construction_launched = True
                    self.launch_detect_construction.start()
                else:
                    pass
            else:
                if self.launch_detect_construction_launched == True:
                    self.launch_detect_construction_launched = False
                    self.launch_detect_construction.shutdown()
                pass
                
  
    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('core_node_controller')
    node = CoreNodeController()
    node.main()
