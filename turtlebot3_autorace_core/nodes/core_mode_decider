#!/usr/bin/env python
# -*- coding: utf-8 -*-

################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

# Author: Leon Jung, Gilbert, Ashe Kim

import rospy
import numpy as np
from enum import Enum
from std_msgs.msg import UInt8
from turtlebot3_autorace_msgs.msg import MovingParam

class CoreModeDecider():
    def __init__(self):
        # subscribes
        self.sub_traffic_light = rospy.Subscriber('/detect/traffic_light', UInt8, self.cbInvokedByTrafficLight, queue_size=1)
        self.sub_traffic_sign = rospy.Subscriber('/detect/traffic_sign', UInt8, self.cbInvokedByTrafficSign, queue_size=1)
        self.sub_construction_stamped = rospy.Subscriber('/detect/construction_stamped', UInt8, self.cbConstructionStamped, queue_size=1)

        # publishes
        self.pub_decided_mode = rospy.Publisher('/robot/mode', UInt8, queue_size=1)
        self.pub_moving = rospy.Publisher('/robot/allow_moving', UInt8, queue_size=1)
        self.pub_turning = rospy.Publisher('/robot/must_turn', UInt8, queue_size=1)
        self.pub_intersection_order = rospy.Publisher('/detect/intersection_order', UInt8, queue_size=1)
        self.pub_construction_order = rospy.Publisher('/detect/construction_order', UInt8, queue_size=1)

        self.traffic_detected = False
        self.construction_detected = False
        self.left_count = 0
        self.right_count = 0

    def cbConstructionStamped(self, construction_msg):
        decided_mode = UInt8()
        decided_mode.data = 5
        self.pub_decided_mode.publish(decided_mode)

        decided_mode = UInt8()
        decided_mode.data = 1
        self.pub_moving.publish(decided_mode)

    def cbInvokedByTrafficLight(self, traffic_light_type_msg):
        rospy.loginfo("------------------invoke green light------------------")

        # allow control lane to start moving
        decided_mode = UInt8()
        decided_mode.data = 1
        self.pub_moving.publish(decided_mode)

        # go to traffic mission
        decided_mode = UInt8()
        decided_mode.data = 2
        self.pub_decided_mode.publish(decided_mode)


    def cbInvokedByTrafficSign(self, traffic_sign_type_msg):       
        # 1 - Traffic, 2 - Left, 3 - Right, 4 - Construction
        if traffic_sign_type_msg.data == 4 and not self.construction_detected:
            self.construction_detected = True 

            decided_mode = UInt8()
            decided_mode.data = 4
            self.pub_decided_mode.publish(decided_mode)

            # stick to right line
            msg_pub_intersection_order = UInt8()
            msg_pub_intersection_order.data = 2
            self.pub_turning.publish(msg_pub_intersection_order)

            decided_mode = UInt8()
            decided_mode.data = 1
            self.pub_construction_order.publish(decided_mode)

        elif traffic_sign_type_msg.data == 1 and not self.traffic_detected:
            rospy.loginfo("------------------traffic detected------------------")
            self.traffic_detected = True

            # go to intersection mission
            decided_mode = UInt8()
            decided_mode.data = 3
            self.pub_decided_mode.publish(decided_mode)

        elif traffic_sign_type_msg.data == 2 or traffic_sign_type_msg.data == 3:
            if traffic_sign_type_msg.data == 2:
                self.left_count += 1
            if traffic_sign_type_msg.data == 3:
                self.right_count += 1

            msg_pub_intersection_order = UInt8()
            msg_pub_intersection_order.data = 1 if self.left_count > self.right_count else 2
            self.pub_turning.publish(msg_pub_intersection_order)

        else:
            return

        


    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('core_mode_decider')
    node = CoreModeDecider()
    node.main()
