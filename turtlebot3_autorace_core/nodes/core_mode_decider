#!/usr/bin/env python
# -*- coding: utf-8 -*-

################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

# Author: Leon Jung, Gilbert, Ashe Kim

import rospy
import numpy as np
from enum import Enum
from std_msgs.msg import UInt8
from turtlebot3_autorace_msgs.msg import MovingParam

class CoreModeDecider():
    def __init__(self):
        # subscribes
        self.sub_traffic_light = rospy.Subscriber('/detect/traffic_light', UInt8, self.cbInvokedByTrafficLight, queue_size=1)
        self.sub_traffic_sign = rospy.Subscriber('/detect/traffic_sign', UInt8, self.cbInvokedByTrafficSign, queue_size=1)

        # publishes
        self.pub_decided_mode = rospy.Publisher('/robot/mode', UInt8, queue_size=1)
        self.pub_moving = rospy.Publisher('/robot/allow_moving', UInt8, queue_size=1)
        self.pub_intersection_order = rospy.Publisher('/detect/intersection_order', UInt8, queue_size=1)

        self.left_right_detected = False

    def cbInvokedByTrafficLight(self, traffic_light_type_msg):
        rospy.loginfo("------------------invoke green light------------------")

        # allow control lane to start moving
        decided_mode = UInt8()
        decided_mode.data = 1
        self.pub_moving.publish(decided_mode)

        # go to traffic mission
        decided_mode = UInt8()
        decided_mode.data = 2
        self.pub_decided_mode.publish(decided_mode)


    def cbInvokedByTrafficSign(self, traffic_sign_type_msg):       
        # 1 - Traffic, 2 - Left, 3 - Right
        if traffic_sign_type_msg.data == 1:
            rospy.loginfo("------------------traffic detected------------------")

            self.traffic_detected = True

            msg_pub_intersection_order = UInt8()
            msg_pub_intersection_order.data = 2
            self.pub_intersection_order.publish(msg_pub_intersection_order)

        if traffic_sign_type_msg.data == 2 or traffic_sign_type_msg.data == 3:
            if not self.left_right_detected:
                rospy.loginfo("------------------invoke intersection------------------")

                self.left_right_detected = True

                msg_pub_intersection_order = UInt8()
                msg_pub_intersection_order.data = 1
                self.pub_intersection_order.publish(msg_pub_intersection_order)

        # go to intersection mission
        decided_mode = UInt8()
        decided_mode.data = 3
        self.pub_decided_mode.publish(decided_mode)

    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('core_mode_decider')
    node = CoreModeDecider()
    node.main()
