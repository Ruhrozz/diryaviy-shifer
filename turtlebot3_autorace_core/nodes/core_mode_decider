#!/usr/bin/env python
# -*- coding: utf-8 -*-

################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

# Author: Leon Jung, Gilbert, Ashe Kim

import rospy
import numpy as np
from enum import Enum
from std_msgs.msg import UInt8
from turtlebot3_autorace_msgs.msg import MovingParam

class CoreModeDecider():
    def __init__(self):
        # subscribes : invoking object detected
        self.sub_traffic_light = rospy.Subscriber('/detect/traffic_light', UInt8, self.cbInvokedByTrafficLight, queue_size=1)

        # publishes : decided mode
        self.pub_decided_mode = rospy.Publisher('/core/decided_mode', UInt8, queue_size=1)

        self.InvokedObject = Enum('InvokedObject', 'traffic_light')
        self.Modes = {"traffic_light": 1, "lane_following": 2}

        self.fnInitMode()

    def cbInvokedByTrafficLight(self, traffic_light_type_msg):
        rospy.loginfo("invoke light")
        self.fnDecideMode(self.InvokedObject.traffic_light.value, traffic_light_type_msg)

    def fnInitMode(self):                                               
        self.current_mode = "traffic_light"
        self.fnPublishMode()

    def fnDecideMode(self, invoked_object, msg_data):
        if self.current_mode == "traffic_light":
            if invoked_object == 1:     # if Light == Green
                self.current_mode = "lane_following"
            else:
                pass
            self.fnPublishMode()
        else:
            pass

    def fnPublishMode(self):
        decided_mode = UInt8()
        decided_mode.data = self.Modes[self.current_mode]
        self.pub_decided_mode.publish(decided_mode)

    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('core_mode_decider')
    node = CoreModeDecider()
    node.main()
